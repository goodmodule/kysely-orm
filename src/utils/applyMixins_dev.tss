
import model, { type Model, type ModelMixinReturn } from '../mixins/model';
import Constructor  from '../@types/Constructor';
import Database from '../Database';
import assign from '../mixins/assign';
/*
\const model: {
  new (...args: any[]): model2<new (arg: Selectable<Users>) => Selectable<Users>, DB, "users", "id">.Model;
  prototype: model2<any, any, any, any>.Model;
  ... 30 more ...;
  deleteById(id: number): Promise<...>;
} & (new (arg: Selectable<...>) => Selectable<...>)


(alias) type Model<TBase extends Constructor<{}>, DB, TableName extends keyof DB & string, IdColumnName extends keyof DB[TableName] & string> = {
  new (...args: any[]): model<TBase, DB, TableName, IdColumnName>.Model;
  prototype: model<any, any, any, any>.Model;
  ... 30 more ...;
  deleteById(id: SelectType<...>): Promise<...>;
} & TBase
import Model

(alias) type Model2<TBase extends Constructor<{}>, DB, TableName extends keyof DB & string, IdColumnName extends keyof DB[TableName] & string> = {
  new (...args: any[]): model<TBase, DB, TableName, IdColumnName>.Model;
  prototype: model<any, any, any, any>.Model;
  ... 30 more ...;
  deleteById(id: SelectType<...>): Promise<...>;
} & TBase
import Model2
*/

function applyMixinsSuper<
  DB,
  TableName extends keyof DB & string,
  IdColumnName extends keyof DB[TableName] & string,
  T1 extends Constructor,
  TBase extends Model<Constructor, DB, TableName, IdColumnName>,
  Mixin1 extends (base: TBase) => T1,
>(
  Base: TBase,
  mixin1: Mixin1,
): T1 {
  return mixin1(Base) as T1;
}

function applyMixins<
  DB,
  TableName extends keyof DB & string,
  IdColumnName extends keyof DB[TableName] & string,
  T1 extends Constructor,
  Mixin1 extends (base: Model<Constructor, DB, TableName, IdColumnName>) => T1,
>(
  db: Database<DB>,
  table: TableName,
  id: IdColumnName,
  mixin1: Mixin1,
) {
  type Table = DB[TableName];
  const BaseClass = assign<DB[TableName]>();
  const ModelClass = model(BaseClass, db, table, id);

  return applyMixinsSuper<DB, TableName, IdColumnName, typeof BaseClass, typeof ModelClass, Mixin1>(ModelClass, mixin1);
}

export default applyMixins;


/*
function applyMixins<
  DB,
  TableName extends keyof DB & string,
  IdColumnName extends keyof DB[TableName] & string,
  T1 extends Constructor,
>(
  db: Database<DB>,
  table: TableName,
  id: IdColumnName,
  mixin1: <TBase extends Constructor>(model: Model<TBase, DB, TableName, IdColumnName>) => T1,

  ) {

    const model = db.model(table, id);
  
    return mixin1<typeof model>(model) as T1;

  */